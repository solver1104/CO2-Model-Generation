# Import Python libraries for later use
import math
import numpy as np
import matplotlib.pyplot as plt

# CO2 data in ppm from May 1964 to April 2022
CarbonDioxideData = [322.25, 321.89, 320.44, 318.69, 316.71, 316.87, 317.68, 318.71, 319.44, 320.44, 320.89, 322.14, 322.17, 321.87, 321.21, 318.87, 317.82, 317.30, 318.87, 319.42, 320.62, 321.60, 322.39, 323.70, 324.08, 323.75, 322.38, 320.36, 318.64, 318.10, 319.78, 321.02, 322.33, 322.50, 323.03, 324.41, 325.00, 324.09, 322.54, 320.92, 319.25, 319.39, 320.73, 321.95, 322.57, 323.15, 323.89, 325.02, 325.57, 325.36, 324.14, 322.11, 320.33, 320.25, 321.32, 322.89, 324.00, 324.41, 325.63, 326.66, 327.38, 326.71, 325.88, 323.66, 322.38, 321.78, 322.85, 324.11, 325.06, 325.99, 326.93, 328.13, 328.08, 327.67, 326.34, 324.68, 323.10, 323.07, 324.01, 325.13, 326.17, 326.68, 327.18, 327.79, 328.93, 328.57, 327.36, 325.43, 323.36, 323.56, 324.80, 326.01, 326.77, 327.63, 327.75, 329.72, 330.07, 329.09, 328.04, 326.32, 324.84, 325.20, 326.50, 327.55, 328.55, 329.56, 330.30, 331.50, 332.48, 332.07, 330.87, 329.31, 327.52, 327.19, 328.17, 328.65, 329.36, 330.71, 331.49, 332.65, 333.10, 332.26, 331.18, 329.40, 327.44, 327.38, 328.46, 329.58, 330.41, 331.41, 332.04, 333.32, 333.98, 333.61, 331.91, 330.06, 328.56, 328.35, 329.50, 330.77, 331.76, 332.58, 333.50, 334.59, 334.89, 334.34, 333.06, 330.95, 329.31, 328.95, 330.32, 331.69, 332.94, 333.43, 334.71, 336.08, 336.76, 336.28, 334.93, 332.76, 331.60, 331.17, 332.41, 333.86, 334.98, 335.40, 336.65, 337.76, 338.02, 337.91, 336.55, 334.69, 332.77, 332.56, 333.93, 334.96, 336.24, 336.77, 337.97, 338.89, 339.48, 339.30, 337.74, 336.10, 333.93, 333.87, 335.30, 336.74, 338.03, 338.37, 340.09, 340.78, 341.48, 341.19, 339.57, 337.61, 335.90, 336.03, 337.12, 338.23, 339.25, 340.50, 341.40, 342.52, 342.93, 342.27, 340.50, 338.45, 336.71, 336.88, 338.38, 339.63, 340.77, 341.63, 342.72, 343.59, 344.16, 343.37, 342.07, 339.83, 338.00, 337.88, 339.28, 340.51, 341.40, 342.54, 343.12, 344.96, 345.78, 345.34, 344.00, 342.40, 339.88, 340.01, 341.16, 342.98, 343.82, 344.62, 345.38, 347.15, 347.52, 346.88, 345.47, 343.34, 341.13, 341.40, 343.02, 344.25, 344.99, 346.01, 347.43, 348.34, 348.92, 348.24, 346.54, 344.64, 343.06, 342.78, 344.21, 345.53, 346.28, 346.93, 347.83, 349.53, 350.19, 349.53, 347.92, 345.88, 344.83, 344.16, 345.64, 346.88, 348.00, 348.47, 349.40, 350.97, 351.84, 351.25, 349.50, 348.09, 346.44, 346.09, 347.54, 348.69, 350.16, 351.47, 351.96, 353.33, 353.97, 353.55, 352.14, 350.19, 348.50, 348.66, 349.85, 351.12, 352.55, 352.86, 353.48, 355.21, 355.47, 354.92, 353.70, 351.47, 349.61, 349.79, 351.10, 352.32, 353.46, 354.50, 355.19, 356.00, 356.96, 356.04, 354.62, 352.71, 350.77, 350.99, 352.64, 354.02, 354.53, 355.55, 356.96, 358.40, 359.14, 358.04, 355.98, 353.81, 351.95, 352.02, 353.55, 354.79, 355.79, 356.52, 357.61, 358.95, 359.46, 359.05, 356.82, 354.80, 352.81, 353.11, 353.96, 355.20, 356.50, 356.97, 358.18, 359.26, 360.08, 359.40, 357.38, 355.33, 353.50, 353.80, 355.15, 356.62, 358.19, 358.73, 359.79, 361.09, 361.52, 360.77, 359.38, 357.31, 355.68, 355.83, 357.42, 358.87, 359.81, 360.84, 361.48, 363.30, 363.64, 363.11, 361.75, 359.31, 357.91, 357.62, 359.42, 360.56, 361.91, 363.11, 363.88, 364.58, 365.29, 364.84, 363.52, 361.35, 359.32, 359.48, 360.64, 362.21, 363.07, 363.87, 364.44, 366.23, 366.68, 365.52, 364.36, 362.39, 360.08, 360.67, 362.32, 364.16, 365.22, 366.04, 367.20, 368.50, 369.19, 368.77, 367.53, 365.67, 363.80, 364.13, 365.36, 366.87, 368.05, 368.77, 369.49, 371.04, 370.90, 370.25, 369.17, 366.83, 364.54, 365.04, 366.58, 367.92, 369.05, 369.37, 370.42, 371.57, 371.74, 371.60, 370.02, 368.03, 366.53, 366.64, 368.20, 369.44, 370.20, 371.42, 372.04, 372.78, 373.94, 373.23, 371.54, 369.47, 367.88, 368.01, 369.60, 371.15, 372.36, 373.00, 373.44, 374.77, 375.48, 375.33, 373.95, 371.41, 370.63, 370.18, 372.01, 373.71, 374.61, 375.55, 376.04, 377.58, 378.28, 378.07, 376.54, 374.42, 372.92, 372.94, 374.29, 375.63, 376.73, 377.31, 378.33, 380.44, 380.56, 379.49, 377.71, 375.77, 373.99, 374.17, 375.79, 377.39, 378.29, 379.56, 380.06, 382.01, 382.21, 382.05, 380.63, 378.64, 376.38, 376.77, 378.27, 379.92, 381.33, 381.98, 382.53, 384.33, 384.89, 383.99, 382.25, 380.44, 378.77, 379.03, 380.11, 381.62, 382.55, 383.68, 384.31, 386.20, 386.38, 385.85, 384.42, 381.81, 380.83, 380.83, 382.32, 383.58, 385.04, 385.81, 385.80, 386.74, 388.49, 388.02, 386.22, 384.05, 383.05, 382.75, 383.98, 385.08, 386.63, 387.10, 388.50, 389.54, 390.15, 389.60, 388.05, 386.06, 384.64, 384.32, 386.05, 387.48, 388.55, 390.08, 391.02, 392.39, 393.24, 392.26, 390.35, 388.53, 386.85, 387.18, 388.69, 389.83, 391.33, 391.96, 392.49, 393.40, 394.33, 393.75, 392.64, 390.25, 389.05, 388.98, 390.30, 391.86, 393.13, 393.42, 394.43, 396.51, 396.96, 395.97, 394.60, 392.61, 391.20, 391.09, 393.03, 394.42, 395.69, 396.94, 397.35, 398.44, 400.06, 398.95, 397.45, 395.49, 393.47, 393.77, 395.27, 396.90, 398.01, 398.18, 399.56, 401.44, 401.98, 401.41, 399.17, 397.30, 395.49, 395.74, 397.32, 398.88, 399.94, 400.40, 401.60, 403.53, 404.04, 402.81, 401.54, 398.93, 397.43, 398.22, 400.17, 401.82, 402.58, 404.09, 404.79, 407.50, 407.59, 406.94, 404.43, 402.17, 400.95, 401.43, 403.57, 404.48, 406.00, 406.57, 406.99, 408.88, 409.84, 409.05, 407.13, 405.17, 403.20, 403.57, 405.10, 406.68, 407.98, 408.36, 409.21, 410.24, 411.23, 410.81, 408.83, 407.02, 405.52, 405.93, 408.04, 409.17, 410.85, 411.59, 411.91, 413.46, 414.76, 413.89, 411.78, 410.01, 408.48, 408.40, 410.16, 411.81, 413.30, 414.05, 414.45, 416.11, 417.15, 416.29, 414.42, 412.52, 411.18, 411.12, 412.88, 413.89, 415.15, 416.47, 417.16, 418.24, 418.95, 418.70, 416.65, 414.34, 412.90, 413.55, 414.82, 416.43, 418.01, 418.99, 418.45, 420.02]

# Standardize data points to around y=0 to reduce frequency 0 oscillation strength
for i in range(len(CarbonDioxideData)):
    CarbonDioxideData[i] -= (316.65 + 98 * (i/696)**1.2)

# Extract angle of complex number
def CmplxToAng(real, imaginary):
    if imaginary < 0:
        return 2 *math.pi - math.acos(real/math.sqrt(real**2 + imaginary**2))
    return math.acos(real/math.sqrt(real**2 + imaginary**2))

# Discrete Fourier Transform implementation based on equations explained in paper
def DiscreteFourierTransform(discreteData):
    result=[]

    for i in range(len(discreteData)):
        real= 0
        imaginary = 0

        for j in range(len(discreteData)):
            real += discreteData[j] * math.cos(-2 * math.pi * i *  j / len(discreteData))
            imaginary += discreteData[j] * math.sin(-2 * math.pi * i * j / len(discreteData))

        result.append([real, imaginary])

    return result

# CO2 data transformed to frequency domain by applying DFT to CO2 data points
DFTData = DiscreteFourierTransform(CarbonDioxideData)

# Calculate and normalize magnitude of each of the complex elements in frequency domain data and normalize magnitudes to compute the amplitude of each frequency's sinusoidal component
DFTabs = []
for i in range(len(DFTData)):
    DFTabs.append(math.sqrt(DFTData[i][0]**2 + DFTData[i][1]**2) / len(DFTData))

# Plot amplitude of each sinusoidal component
EvenSpace = np.linspace(0, len(DFTabs), len(DFTabs))
plt.bar (EvenSpace, DFTabs, width=2)
plt.show()

# Calculate predicted model with sinusoidals in DFT result with amplitude greater than 0.1
predictions = []

for i in range(696):
    predictions.append(316.65 + 98 * (i/696)**1.2 + DFTData[0][0]/696)
    for j in range(1,348):
        if DFTabs[j] > 0.1:
            freqs[j] = True
            predictions[i] += 2*DFTabs[j] * math.sin(2 * j/696 * math.pi * (i - (348/j) * (1.5 - CmplxToAng(DFTData[j][0],DFTData[j][1])/math.pi)))

# Plot predicted model
plt.bar(EvenSpace, predictions,width=2)
plt.show()

# Reset CO2 data to untransformed state
for i in range(696):
    CarbonDioxideData[i] += (316.65 + 98 * (i/696)**1.2)

# Calculate Pearson correlation coefficient of predictions and actual data to determine how much they match
sum1 = 0
sum2 = 0
sum3 = 0
mean1 = 0
mean2 = 0

for i in range(696):
    mean1 += predictions[i]
    mean2 += CarbonDioxideData[i]

mean1/=696
mean2/=696

for i in range(696):
    sum1 += (predictions[i] - mean1) * (CarbonDioxideData[i] - mean2)
    sum2 += (predictions[i]-mean1) ** 2
    sum3 += (CarbonDioxideData[i] - mean2) ** 2

print("Correlation coefficient: " + sum1 / math.sqrt(sum2 * sum3))

# Calculate F statistic of model to test how good the model is
SSE1 = 0
SSE2 = 0

for i in range(696):
    SSE1 += (CarbonDioxideData[i] - predictions[i])**2
    SSE2 += (mean2 - CarbonDioxideData[i])**2

print("F statistic: " + ((SSE2 - SSE1) / (28-1))/(SSE1 / (696 - 28)))
